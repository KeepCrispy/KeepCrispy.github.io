[
  
    {

      "title"    : "Setting up and running Snort on Ubuntu",
      "url"      : "/SnortLab",
      "content"  : "Snort is an intrusion detection and prevention system (IDPS), and can be configured to be used as a WAF(Web Application Firewall). Intrusion detection and prevention systems (IDPS) are used to detect and protect networks from malicious traffic and requests. They are able to detect suspicious activity, such as malicious requests and traffic, and take action to block the malicious activity before it reaches its destination. IDPS systems are an important part of network security, as they can prevent malicious actors from exploiting security vulnerabilities.\n\nToday, I’m going to share my knowledge on setting up Snort! Snort is a powerful tool for intrusion detection and prevention. I will explain the steps needed to setup Snort on your network and walk you through configuring snort and testing your setup. I’ll also provide helpful tips and tricks that will help you get the most out of Snort.\n\nFirst make sure your system is up to date:\nsudo apt update\nsudo apt upgrade\n\nTo install on Ubuntu use the following command:\nsudo apt install snort\n\nNext we want to configure Ubuntu’s network settings to allow the snort traffic to be monitored\n\nEdit /etc/sysctl.conf and add the following lines:\n\n\n  net.ipv4.conf.default.accept_source_route = 0\n  net.ipv4.conf.all.accept_source_route = 0\n  net.ipv4.conf.default.accept_redirects = 0\n  net.ipv4.conf.all.accept_redirects = 0\n  net.ipv4.conf.default.send_redirects = 0\n  net.ipv4.conf.all.send_redirects = 0\n  net.ipv4.conf.default.rp_filter = 1\n  net.ipv4.conf.all.rp_filter = 1\n\n\nThe rp_filter setting in the sysctl.conf file determines whether or not the kernel will accept reverse path filtering on the network traffic. Reverse path filtering ensures that incoming packets are coming from the same source as the reply packets. This is important for network security, as it helps to prevent malicious packets from entering the network. We want this turned on.\n\nWe want to turn on the rp_filter setting in the sysctl.conf file for snort because it helps to protect against malicious packets entering the network. By enabling reverse path filtering, snort can more accurately detect and respond to malicious activity on the network, as it can detect when incoming packets are not from the same source as the reply packets.\n\n\n\nNext we will need to update the snort config file. This is where we tell snort how to process the traffic, what traffic to look for, and when and how to output alerts.\n\nLocating the snort config:\n\n\n\nSnort config location:\n\n\n\n#config information\n\nThe config files does several things. It tells snort what traffic to scan like the port you want to keep an eye on, what to look for and the rules you want to scan against, and finally how to log/output alerts.\n\nthings it can scan for:\n\n  active scanning\n  shellcode rules\n  suspicious TCP/UDP traffic\n  suspicious connections to your web/ssh/ftp/smb servers or outwards\n\n\nHere is a look at it’s basic port conifigurations:\n\n\n\nreading through the config you will come across some preprocessor and decoder configurations as well.\n\nThe Snort decoder and preprocessors are responsible for decoding and processing packets as they are received. The decoder is responsible for breaking down the packets into their individual headers, while the preprocessors perform tasks such as stream reassembly, protocol normalization, and port scanning detection. Together, they allow snort to accurately detect and respond to malicious activity.\n\nFinally the part that makes snort shine is the output plugin settings. The output plugin allows you to automate piping alerts to your desired file/webapp for logging purposes\n\nhere are a few output formats:\n\n  xml, cvs,unified outputs, and system logs\n\n\nUnified binary output can be used with something like Barnyard for additional features such as JSON support for web api integration\n\nYou can also create a basic CSV using:\n\n  output alert_csv: filename (options seperated by commas)\n\n\nMost of these settings can be left as default for now. But, you will want to install PullPork aftwards for the ability to automatically update the community rulesets for instrusion detection.\n\nFinally, after setting the above up. you will need to be root to access your network interfaces when running Snort.\n\nuse the following command for snort:\n\n  sudo snort -i (network interface) -v -c /etc/snort/snort.conf\n\n\n\n\nSnort outputs alerts in the terminal when it detects suspicious activity on a network. This could be anything from a malicious scan to an attack attempt. The output is a text-based alert that includes information such as the source and destination IP addresses, the protocol used, and any related alert message.\n\n#Snort as a WAF\n\nWeb application firewalls (WAFs) are used to protect web applications from malicious traffic and requests. They can detect and block malicious traffic and filter out malicious requests, such as those for SQL injection and cross-site scripting attacks. WAFs are becoming increasingly popular as more organizations move their applications and data to the cloud. By using a WAF, organizations can ensure that their applications and data are secure from malicious actors.\n\nSnort IPS mode stands for Intrusion Prevention System mode. This mode allows Snort to take action when it detects suspicious activity, such as blocking malicious traffic or filtering out malicious requests. It is used to protect networks from malicious actors and prevent the exploitation of security vulnerabilities.\n\nThe IPS mode can be activated when starting Snort using “-Q –daq afpacket” followed by the interfaces arguement “-i eth0:eth1” where eth0 and eth1 are the network interfaces you’d like to join.\n\nWith IPS enabled, you’ll be able to add some simple rules using regular expression to the snort config file to drop harmful traffic\n\nExample - to block SQL injection rule\n\ndrop TCP any any -&gt; your_target_server_ip 80 (flow:to_server; content:!\"GET\"; nocase;\npcre=\"[\\'\\\"\\;\\:\\|\\&amp;\\$\\%\\@\\\\\\/&lt;&gt;()+,]\")\n\nAbove rule will filter:\n\n\n  From any Source IP\n  From any source Port\n  Destination IP is your_target_server_ip, you need to change this\n  Destination Port is 80 (HTTP)\n  Content should have value “GET “ – can be changed to “POST”\n  Word “nocase” specifies matching is not case sensitive\n  filter based on Regular expression mentioned in “pcre=”['\"\\;:|\\&amp;$\\%\\@\\\\/&lt;&gt;()+,]” will not allow ‘ “ ; : | &amp;\n@ \\ / &lt; &gt; ( ) + , characters in request.\n\n\nHere are additional resources and documentation for further customizing snort.\n\n  Snort Official Documentation - https://www.snort.org/documents\n  Shirkdog’s PulledPork project - https://github.com/shirkdog/pulledpork\n  firnsy’s Barnyard Spooler for JSON alert outputs - https://github.com/firnsy/barnyard2"

    },
  
    {

      "title"    : "Using Cipher Block Chaining(CBC cipher) to Encrypt Access Granting Certificates",
      "url"      : "/SecureAuthCert",
      "content"  : "In this project, I wanted to explore the use of a CBC (Cipher Block Chaining) block cipher to generate encrypted certificates with customizable expiry dates. This system creates a primary server authority certificate which is then used to generate additional access certificates. This provides a secure and reliable way of granting access to services and ensuring that the access is only granted for a specified amount of time.\n\nAccess granting certificates are an important part of our digital security and are used to control access to services, websites, and other online resources. They are often used in authentication protocols such as OAuth and Kerberos to help protect against unauthorized access. OAuth and Kerberos both use a centralized authority system to issue and validate certificates, but this project provides the ability to have the expiry of the access certificates built into the certificates themselves.\n\nCBC (Cipher Block Chaining) is a type of block cipher encryption which uses a random hash to encrypt the data stored in the certificates. This ensures that the data is secure and that each certificate is unique, making it difficult to tamper with. This is an important feature as it helps to protect the data stored in the certificates and helps to ensure that they can only be used for the specified time period.\n\nOverall, this project provides a secure and reliable way of granting access to services and websites, with the added security of a CBC block cipher and the ability to set expiry dates for each certificate. It is a great way to ensure that access is only granted for a specified amount of time, without relying on a centralized authority system.\n\nexample of certificate generation:\n\n\n\nLink to My Github Project - SecureAuthCert"

    },
  
    {

      "title"    : "Powershell AMSI Lab - evading using obfuscation and detection POC",
      "url"      : "/AMSIProj",
      "content"  : "I’m pretty sure many developers like me have came across their code being flagged by windows defender as a virus or malware strictly because it was just doing its job accessing system functions or making a TCP connection to the network service. Having been frustrated by this many times, I wanted to figure out why my legit working code is being flagged with a false positive, while threat actors are able to bypass this security completely.\n\nThe Anti-Malware Scan Interface (AMSI) is a security technology built into the Windows 10 operating system. This interface serves as an open platform for allowing antivirus software to interact with Windows 10, allowing the antivirus program to detect and respond to malicious code. This helps to protect users from malicious software and provide a safer computing environment. AMSI is an essential tool for antivirus programs, as it allows them to detect and block malicious code more effectively. The interface also allows for more accurate detection of malicious code and provides more detailed information about the threats that are detected. This allows antivirus programs to more effectively protect users from threats, as well as provide a more secure computing experience.\n\nIf you look closely into Anti-Malware Scan Interface (AMSI) evasion vulnerabilities published over the years, extensive work has been put into this. Threat actors have developed several techniques to bypass AMSI detection. These techniques include encrypting the payload and decrypting it in memory inside PowerShell, splitting up the payload scripts and recombining them, and using different PowerShell encoding techniques. Additionally, attackers can embed the payload inside another executable, which will not be caught by AMSI until the executable is executed.\n\nAll these techniques were used by threat actors to bypass AMSI detection and it is important to be aware of them in order to understand how attackers can fly under the radar.\n\nPanagiotis Chartas, a well known Security Researcher, made a great video guide on obfuscation techniques\n\nHe also posted a great resource on his github: Powershell Obfuscation Bible\n\nBased on his findings we know that that AMSI isn’t quite able to catch obfuscated powershell code just yet.\n\nEven though obfuscated code can easily be identified using definitions profiling. The problem though is much deeper, as anyone with programming experience would know that the same code can be easily redesigned with different nuances.\n\nThe possibilities of obfucation are endless and it’s a recipe for disaster.\n\nPanagiotis findings into this vulnerability means that, at present, it can be exploited using very simple obscuration with basic string manipulation, all without the need of external tools.\n\nIf a threat actor took advantage of this, their powershell scripts will easily fly under the radar.\n\nRemediation Strategies\n\nIn order to mitigate the threat of malicious code bypassing AMSI detection, it is important to perform security audits on APIs being used, harden your network infrastructure, and make sure your systems are properly configured with good access control. Additionally, it is important to regularly update antivirus software and perform regular security audits and patching of the system.\n\nPentesting Screenshots\n\nHere is a simple POC of an obfuscated shell encapsulated in an exe runtime that was generated using an obfuscator tool. It is being used to gain remote access in a custom lab. This was done with antivirus scans turned on.\n\n\n\nand what the reverse shell looks like once launched.\n\n\n\nMy thoughts on remdiation strategies\n\nObfuscation techniques include randomizing variable names, padding with more logic and inserting wrapper logic around the executed scripts. Because of the small file size requirement for most payloads to fly undetected when logged, it is likely that the core execution steps are unchanged to keep things compact. Thus even if the variable lengths changes, the logical pattern of function calls, and assigning variable values are likely unchanged when additional information is padded on. Making it somewhat possible to flag by scanning the program for execution logic patterns.\n\nI’ve wrote a simple opensource POC BlueWyvern Scanner to use Regex to catch obfuscated and some possibly malicious code that would require some deeper knowledge of yara to perform.\n\nBest Practices for Users\n\nIn order to protect their systems from malicious code, users should follow best practices such as using strong passwords, avoiding suspicious links and downloads, and regularly checking server and operating system access logs. Additionally, users should be aware of the latest threats and tricks attackers use to bypass security measures.\n\nIt is always good practice to be engaging in DevSecOps to ensure the deployment pipeline and environments are monitored for integrity.\n\nChecking server and operating system access logs is a good way to determine if there has been any malicious activity on the system. However, it is important to note that depending on the type of malware used, it may be difficult to detect the malicious activity in the logs.\n\nIt is always best to take preventative measures. This can include regularly auditing and patching the system. Making sure to regularly review access control measures. Additionally, it is important to ensure that users are following best practices when it comes to online security, such as using strong passwords and avoiding suspicious links and downloads."

    },
  

  

  
]