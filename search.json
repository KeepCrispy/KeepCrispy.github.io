[
  
    {

      "title"    : "Setting up and running Snort on Ubuntu",
      "url"      : "/SnortLab",
      "content"  : "Snort is an Intrusion Detection and Prevention System (IDPS) designed to protect networks against malicious traffic and requests. As it is capable of detecting suspicious activity, such as malicious requests or traffic, it is able to take action to block such activities before they reach their destinations. IDPS systems are an integral part of any security infrastructure, as they protect against malicious actors exploiting potential security vulnerabilities. Furthermore, Snort can also be configured to act as a Web Application Firewall (WAF).\n\nToday, I’m going to share my knowledge on setting up Snort! Snort is a powerful tool for intrusion detection and prevention. I will explain the steps needed to setup Snort on your network and walk you through configuring snort and testing your setup. I’ll also provide helpful tips and tricks that will help you get the most out of Snort.\n\nFirst make sure your system is up to date:\nsudo apt update\nsudo apt upgrade\n\nTo install on Ubuntu use the following command:\nsudo apt install snort\n\nNext we want to configure Ubuntu’s network settings to allow the snort traffic to be monitored\n\nEdit /etc/sysctl.conf and add the following lines:\n\n\n  net.ipv4.conf.default.accept_source_route = 0\n  net.ipv4.conf.all.accept_source_route = 0\n  net.ipv4.conf.default.accept_redirects = 0\n  net.ipv4.conf.all.accept_redirects = 0\n  net.ipv4.conf.default.send_redirects = 0\n  net.ipv4.conf.all.send_redirects = 0\n  net.ipv4.conf.default.rp_filter = 1\n  net.ipv4.conf.all.rp_filter = 1\n\n\nThe sysctl.conf file’s “rp_filter” setting is an important component of network security, as it enables reverse path filtering. By allowing reverse path filtering, the kernel can determine whether incoming packets originate from the same source as the corresponding reply packets. Thus, turning on this setting helps to block malicious packets from entering the network. For this reason, it is essential to activate the rp_filter setting in the sysctl.conf file for Snort in order to provide increased protection against malicious activity on the network.\n\n\n\nNext we will need to update the snort config file. This is where we tell snort how to process the traffic, what traffic to look for, and when and how to output alerts.\n\nLocating the snort config:\n\n\n\nSnort config location:\n\n\n\n#config information\n\nThe config files does several things. It tells snort what traffic to scan like the port you want to keep an eye on, what to look for and the rules you want to scan against, and finally how to log/output alerts.\n\nthings it can scan for:\n\n  active scanning\n  shellcode rules\n  suspicious TCP/UDP traffic\n  suspicious connections to your web/ssh/ftp/smb servers or outwards\n\n\nHere is a look at it’s basic port conifigurations:\n\n\n\nreading through the config you will come across some preprocessor and decoder configurations as well.\n\nThe Snort decoder and preprocessors fulfill a vital role in the network security infrastructure, providing the capacity to dissect and analyze packets as they are received. The decoder dissects the packets into their applicable protocol headers while the preprocessors further analyse the data, performing such functions as stream reassembly, protocol normalization and port scanning detection. In essence, the combination of these capabilities allows Snort to detect and respond accurately to malicious activity.\n\nFinally the part that makes snort shine is the output plugin settings. The output plugin allows you to automate piping alerts to your desired file/webapp for logging purposes\n\nhere are a few output formats:\n\n  xml, cvs,unified outputs, and system logs\n\n\nUnified binary output can be used with something like Barnyard for additional features such as JSON support for web api integration\n\nYou can also create a basic CSV using:\n\n  output alert_csv: filename (options seperated by commas)\n\n\nMost of these settings can be left as default for now. But, you will want to install PullPork aftwards for the ability to automatically update the community rulesets for instrusion detection.\n\nFinally, after setting the above up. you will need to be root to access your network interfaces when running Snort.\n\nuse the following command for snort:\n\n  sudo snort -i (network interface) -v -c /etc/snort/snort.conf\n\n\n\n\nSnort is now ready to generate text-based alerts when potentially malicious activity is detected on a network. These alerts provide essential details, such as source and destination IP addresses, port numbers, and applicable alert messages, about the traffic that may warrant attention.\n\n#Snort as a WAF\n\nWeb Application Firewalls (WAFs) are becoming an invaluable tool for organizations to protect their applications and data as they increasingly migrate these assets to the cloud. WAFs are capable of detecting and blocking malicious traffic, as well as filtering out malicious requests such as those associated with SQL injection and cross-site scripting attacks, thus providing an effective defense against malicious actors.\n\nAdditionally, Snort IPS mode provides an added layer of security, allowing it to take action against suspicious behaviors including blocking malicious traffic and filtering out malicious requests. Ultimately, WAFs and Snort’s IPS mode ensure that an organization’s applications and data remain secure against malicious actors.\n\nThe IPS mode can be activated when starting Snort using “-Q –daq afpacket” followed by the interfaces arguement “-i eth0:eth1” where eth0 and eth1 are the network interfaces you’d like to join.\n\nWith IPS enabled, you’ll be able to add some simple rules using regular expression to the snort config file to drop harmful traffic\n\nExample - to block SQL injection rule\n\ndrop TCP any any -&gt; your_target_server_ip 80 (flow:to_server; content:!\"GET\"; nocase;\npcre=\"[\\'\\\"\\;\\:\\|\\&amp;\\$\\%\\@\\\\\\/&lt;&gt;()+,]\")\n\nAbove rule will filter:\n\n\n  From any Source IP\n  From any source Port\n  Destination IP is your_target_server_ip, you need to change this\n  Destination Port is 80 (HTTP)\n  Content should have value “GET “ – can be changed to “POST”\n  Word “nocase” specifies matching is not case sensitive\n  filter based on Regular expression mentioned in “pcre=”['\"\\;:|\\&amp;$\\%\\@\\\\/&lt;&gt;()+,]” will not allow ‘ “ ; : | &amp;\n@ \\ / &lt; &gt; ( ) + , characters in request.\n\n\nHere are additional resources and documentation for further customizing snort.\n\n  Snort Official Documentation - https://www.snort.org/documents\n  Shirkdog’s PulledPork project - https://github.com/shirkdog/pulledpork\n  firnsy’s Barnyard Spooler for JSON alert outputs - https://github.com/firnsy/barnyard2"

    },
  
    {

      "title"    : "Using Cipher Block Chaining(CBC cipher) to Encrypt Access Granting Certificates",
      "url"      : "/SecureAuthCert",
      "content"  : "This project explores the use of Cipher Block Chaining (CBC) block cipher technology for generating encrypted access certificates with configurable expiration dates. This secure system involves a primary server authority certificate for issuing and validating additional access certificates. This system provides an efficient way of providing access only for the required time period while ensuring the security of the data via cipher block chaining.\n\nCBC (Cipher Block Chaining) is a type of block cipher encryption which uses a chain of linked data blocks together, which are then encrypted using a pseudorandom function. Each block is encrypted with the help of a key generated using a different, random hash. This ensures that each block is intrinsic and linked with the other blocks in the chain, making it difficult to decipher the data. Additionally, the encryption process of the chain ensures that all the data stored within the certificates can be securely kept private, and no one, other than those with the right key, can access them. Furthermore, the distinct random hash used for each block ensures that each certificate is unique and unrepeatable, making it near impossible to tamper with. Finally, the expandd ability to specify an expiry date also ensures that users have access to the certificates for the predetermined length of time only.\n\nThis system begins by the primary server authority issuing a certificate for access. The certificate is then encrypted using CBC technology with a random hash for data security. With configurable expiration dates, the access to the services can be limited and specified to the desired amount of time. Once the server certificate is issued, the secondary access certificates generate are also encrypted to ensure secure communication and validation. This makes it difficult to tamper with the data stored in the certificates as they are unique, encrypted as a whole and tied to a specific service.\n\nThe system is also more efficient as no centralized system is needed to issue and validate certificates. This allows access to be trusted without relying on a third-party system. Furthermore, the ability to specify expiration dates allows for the desired period of time to be granted to users.\n\nOverall, this project provides a secure and reliable solution for accessing services and websites with configurable expiration dates. By utilizing the security of the CBC cipher and configurable expiration dates, access can be granted for the desired period of time without reliance on a central authority. Consequently, this project demonstrates the vast potential of block cipher technology for securing digital resources.\n\nexample of certificate generation:\n\n\n\nLink to My Github Project - SecureAuthCert"

    },
  
    {

      "title"    : "Powershell AMSI Lab - evading using obfuscation and detection POC",
      "url"      : "/AMSIProj",
      "content"  : "I’m pretty sure many developers like me have came across their code being flagged by windows defender as a virus or malware strictly because it was just doing its job accessing system functions or making a TCP connection to the network service. Having been frustrated by this many times, I wanted to figure out why my legit working code is being flagged with a false positive, while threat actors are able to bypass this security completely.\n\nThe Anti-Malware Scan Interface (AMSI) is a security technology built into the Windows 10 operating system. This interface serves as an open platform for allowing antivirus software to interact with Windows 10, allowing the antivirus program to detect and respond to malicious code. This helps to protect users from malicious software and provide a safer computing environment. AMSI is an essential tool for antivirus programs, as it allows them to detect and block malicious code more effectively. The interface also allows for more accurate detection of malicious code and provides more detailed information about the threats that are detected. This allows antivirus programs to more effectively protect users from threats, as well as provide a more secure computing experience.\n\nIf you look closely into Anti-Malware Scan Interface (AMSI) evasion vulnerabilities published over the years, extensive work has been put into this. Threat actors have developed several techniques to bypass AMSI detection. These techniques include encrypting the payload and decrypting it in memory inside PowerShell, splitting up the payload scripts and recombining them, and using different PowerShell encoding techniques. Additionally, attackers can embed the payload inside another executable, which will not be caught by AMSI until the executable is executed.\n\nAll these techniques were used by threat actors to bypass AMSI detection and it is important to be aware of them in order to understand how attackers can fly under the radar.\n\nPanagiotis Chartas, a well known Security Researcher, made a great video guide on obfuscation techniques\n\nHe also posted a great resource on his github: Powershell Obfuscation Bible\n\nBased on his findings we know that that AMSI isn’t quite able to catch obfuscated powershell code just yet.\n\nEven though obfuscated code can easily be identified using definitions profiling. The problem though is much deeper, as anyone with some programming experience would know that the same code can be easily redesigned with different nuances.\n\nThe possibilities of obfucation are endless and it’s a recipe for disaster.\n\nPanagiotis findings into this vulnerability means that, at present, it can be exploited using very simple obscuration with basic string manipulation, all without the need of external tools or using advanced kernel level bypassing techniques.\n\nIf a threat actor took advantage of this, their powershell scripts will, in most cases, easily fly under the radar.\n\nRemediation Strategies\n\nIn order to mitigate the threat of malicious code bypassing AMSI detection, it is important to perform security audits on APIs being used, harden your network infrastructure, and make sure your systems are properly configured with good access control. Additionally, it is important to regularly update antivirus software and perform regular security audits and patching of the system.\n\nPentesting Screenshots\n\nHere is a simple POC of an obfuscated shell encapsulated in an exe runtime that was generated using an obfuscator tool. It is being used to gain remote access in a custom lab. This was done with antivirus scans turned on.\n\n\n\nand what the reverse shell looks like once launched.\n\n\n\nMy thoughts on remdiation strategies\n\nObfuscation techniques include randomizing variable names, padding with more logic and inserting wrapper logic around the executed scripts. Because of the small file size requirement for most payloads to fly undetected when logged, it is likely that the core execution steps are unchanged to keep things compact. Thus even if the variable lengths changes, the logical pattern of function calls, and assigning variable values are likely unchanged when additional information is padded on. Making it somewhat possible to flag by scanning the program for execution logic patterns.\n\nI’ve wrote a simple opensource POC BlueWyvern Scanner to use Regex to catch obfuscated and some possibly malicious code that would require some deeper knowledge of yara to perform.\n\nThis POC tool uses regex to detect code execution patterns, including suspects of malicious code, malicious URLs, IP addresses, file attachments, and hidden executable calls. It also has the capability of finding common code execution patterns when given multiple sources to profile regex rules, and the finite machine regex-based string search can detect multiple requirements in a single line sweep. It’ll also scan for basic base64 encoding.\n\nThis POC tool can also run in file integrity monitor (FIM) mode. It will scan for updated files in the target directory. If provided with rules as part of the arguements, it’ll scan for those as well.\n\nBest Practices for Users\n\nIn order to protect their systems from malicious code, users should follow best practices such as using strong passwords, avoiding suspicious links and downloads, and regularly checking server and operating system access logs. Additionally, users should be aware of the latest threats and tricks attackers use to bypass security measures.\n\nIt is always good practice to be engaging in DevSecOps to ensure the deployment pipeline and environments are monitored for integrity.\n\nChecking server and operating system access logs is a good way to determine if there has been any malicious activity on the system. However, it is important to note that depending on the type of malware used, it may be difficult to detect the malicious activity in the logs.\n\nIt is always best to take preventative measures. This can include regularly auditing and patching the system. Making sure to regularly review access control measures. Additionally, it is important to ensure that users are following best practices when it comes to online security, such as using strong passwords and avoiding suspicious links and downloads."

    },
  

  

  
]