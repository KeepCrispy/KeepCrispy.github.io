<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-07-10T10:50:06-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Refining The Art of Security</title><subtitle>4reW, software engineer exploring security research</subtitle><author><name>4reW</name></author><entry><title type="html">Using Cipher Block Chaining(CBC cipher) to Encrypt Access Granting Certificates</title><link href="http://localhost:4000/SecureAuthCert" rel="alternate" type="text/html" title="Using Cipher Block Chaining(CBC cipher) to Encrypt Access Granting Certificates" /><published>2023-04-28T00:00:00-07:00</published><updated>2023-04-28T00:00:00-07:00</updated><id>http://localhost:4000/SecureAuthCert</id><content type="html" xml:base="http://localhost:4000/SecureAuthCert">&lt;p&gt;This project explores the use of Cipher Block Chaining (CBC) block cipher technology for generating encrypted access certificates with configurable expiration dates. This secure system involves a primary server authority certificate for issuing and validating additional access certificates. This system provides an efficient way of providing access only for the required time period while ensuring the security of the data via cipher block chaining.&lt;/p&gt;

&lt;p&gt;CBC (Cipher Block Chaining) is a type of block cipher encryption which uses a chain of linked data blocks together, which are then encrypted using a pseudorandom function. Each block is encrypted with the help of a key generated using a different, random hash. This ensures that each block is intrinsic and linked with the other blocks in the chain, making it difficult to decipher the data. Additionally, the encryption process of the chain ensures that all the data stored within the certificates can be securely kept private, and no one, other than those with the right key, can access them. Furthermore, the distinct random hash used for each block ensures that each certificate is unique and unrepeatable, making it near impossible to tamper with. Finally, the expandd ability to specify an expiry date also ensures that users have access to the certificates for the predetermined length of time only.&lt;/p&gt;

&lt;p&gt;This system begins by the primary server authority issuing a certificate for access. The certificate is then encrypted using CBC technology with a random hash for data security. With configurable expiration dates, the access to the services can be limited and specified to the desired amount of time. Once the server certificate is issued, the secondary access certificates generate are also encrypted to ensure secure communication and validation. This makes it difficult to tamper with the data stored in the certificates as they are unique, encrypted as a whole and tied to a specific service.&lt;/p&gt;

&lt;p&gt;The system is also more efficient as no centralized system is needed to issue and validate certificates. This allows access to be trusted without relying on a third-party system. Furthermore, the ability to specify expiration dates allows for the desired period of time to be granted to users.&lt;/p&gt;

&lt;p&gt;Overall, this project provides a secure and reliable solution for accessing services and websites with configurable expiration dates. By utilizing the security of the CBC cipher and configurable expiration dates, access can be granted for the desired period of time without reliance on a central authority. Consequently, this project demonstrates the vast potential of block cipher technology for securing digital resources.&lt;/p&gt;

&lt;p&gt;example of certificate generation:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/secureauthcert1.png&quot; alt=&quot;SecureAuthCert running&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Link to My Github Project - &lt;a href=&quot;https://github.com/KeepCrispy/SecureAuthCert&quot;&gt;SecureAuthCert&lt;/a&gt;&lt;/p&gt;</content><author><name>4reW</name></author><category term="Posts" /><category term="Access Control" /><category term="DevSecOps" /><summary type="html">This project explores the use of Cipher Block Chaining (CBC) block cipher technology for generating encrypted access certificates with configurable expiration dates. This secure system involves a primary server authority certificate for issuing and validating additional access certificates. This system provides an efficient way of providing access only for the required time period while ensuring the security of the data via cipher block chaining.</summary></entry><entry><title type="html">Setting up and running Snort on Ubuntu</title><link href="http://localhost:4000/SnortLab" rel="alternate" type="text/html" title="Setting up and running Snort on Ubuntu" /><published>2023-04-28T00:00:00-07:00</published><updated>2023-04-28T00:00:00-07:00</updated><id>http://localhost:4000/SnortLab</id><content type="html" xml:base="http://localhost:4000/SnortLab">&lt;p&gt;Snort is an Intrusion Detection and Prevention System (IDPS) designed to protect networks against malicious traffic and requests. As it is capable of detecting suspicious activity, such as malicious requests or traffic, it is able to take action to block such activities before they reach their destinations. IDPS systems are an integral part of any security infrastructure, as they protect against malicious actors exploiting potential security vulnerabilities. Furthermore, Snort can also be configured to act as a Web Application Firewall (WAF).&lt;/p&gt;

&lt;p&gt;Today, I’m going to share my knowledge on setting up Snort! Snort is a powerful tool for intrusion detection and prevention. I will explain the steps needed to setup Snort on your network and walk you through configuring snort and testing your setup. I’ll also provide helpful tips and tricks that will help you get the most out of Snort.&lt;/p&gt;

&lt;p&gt;First make sure your system is up to date:
sudo apt update
sudo apt upgrade&lt;/p&gt;

&lt;p&gt;To install on Ubuntu use the following command:
sudo apt install snort&lt;/p&gt;

&lt;p&gt;Next we want to configure Ubuntu’s network settings to allow the snort traffic to be monitored&lt;/p&gt;

&lt;p&gt;Edit /etc/sysctl.conf and add the following lines:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;net.ipv4.conf.default.accept_source_route = 0&lt;/li&gt;
  &lt;li&gt;net.ipv4.conf.all.accept_source_route = 0&lt;/li&gt;
  &lt;li&gt;net.ipv4.conf.default.accept_redirects = 0&lt;/li&gt;
  &lt;li&gt;net.ipv4.conf.all.accept_redirects = 0&lt;/li&gt;
  &lt;li&gt;net.ipv4.conf.default.send_redirects = 0&lt;/li&gt;
  &lt;li&gt;net.ipv4.conf.all.send_redirects = 0&lt;/li&gt;
  &lt;li&gt;net.ipv4.conf.default.rp_filter = 1&lt;/li&gt;
  &lt;li&gt;net.ipv4.conf.all.rp_filter = 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The sysctl.conf file’s “rp_filter” setting is an important component of network security, as it enables reverse path filtering. By allowing reverse path filtering, the kernel can determine whether incoming packets originate from the same source as the corresponding reply packets. Thus, turning on this setting helps to block malicious packets from entering the network. For this reason, it is essential to activate the rp_filter setting in the sysctl.conf file for Snort in order to provide increased protection against malicious activity on the network.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/snort1.png&quot; alt=&quot;systemctl config&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next we will need to update the snort config file. This is where we tell snort how to process the traffic, what traffic to look for, and when and how to output alerts.&lt;/p&gt;

&lt;p&gt;Locating the snort config:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/snort2.png&quot; alt=&quot;snort config&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Snort config location:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/snort3.png&quot; alt=&quot;snort config&quot; /&gt;&lt;/p&gt;

&lt;p&gt;#config information&lt;/p&gt;

&lt;p&gt;The config files does several things. It tells snort what traffic to scan like the port you want to keep an eye on, what to look for and the rules you want to scan against, and finally how to log/output alerts.&lt;/p&gt;

&lt;p&gt;things it can scan for:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;active scanning&lt;/li&gt;
  &lt;li&gt;shellcode rules&lt;/li&gt;
  &lt;li&gt;suspicious TCP/UDP traffic&lt;/li&gt;
  &lt;li&gt;suspicious connections to your web/ssh/ftp/smb servers or outwards&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a look at it’s basic port conifigurations:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/snort4.png&quot; alt=&quot;snort config&quot; /&gt;&lt;/p&gt;

&lt;p&gt;reading through the config you will come across some preprocessor and decoder configurations as well.&lt;/p&gt;

&lt;p&gt;The Snort decoder and preprocessors fulfill a vital role in the network security infrastructure, providing the capacity to dissect and analyze packets as they are received. The decoder dissects the packets into their applicable protocol headers while the preprocessors further analyse the data, performing such functions as stream reassembly, protocol normalization and port scanning detection. In essence, the combination of these capabilities allows Snort to detect and respond accurately to malicious activity.&lt;/p&gt;

&lt;p&gt;Finally the part that makes snort shine is the output plugin settings. The output plugin allows you to automate piping alerts to your desired file/webapp for logging purposes&lt;/p&gt;

&lt;p&gt;here are a few output formats:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;xml, cvs,unified outputs, and system logs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unified binary output can be used with something like Barnyard for additional features such as JSON support for web api integration&lt;/p&gt;

&lt;p&gt;You can also create a basic CSV using:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;output alert_csv: filename (options seperated by commas)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these settings can be left as default for now. But, you will want to install PullPork aftwards for the ability to automatically update the community rulesets for instrusion detection.&lt;/p&gt;

&lt;p&gt;Finally, after setting the above up. you will need to be root to access your network interfaces when running Snort.&lt;/p&gt;

&lt;p&gt;use the following command for snort:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;sudo snort -i (network interface) -v -c /etc/snort/snort.conf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/snort5.png&quot; alt=&quot;snort running&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Snort is now ready to generate text-based alerts when potentially malicious activity is detected on a network. These alerts provide essential details, such as source and destination IP addresses, port numbers, and applicable alert messages, about the traffic that may warrant attention.&lt;/p&gt;

&lt;p&gt;#Snort as a WAF&lt;/p&gt;

&lt;p&gt;Web Application Firewalls (WAFs) are becoming an invaluable tool for organizations to protect their applications and data as they increasingly migrate these assets to the cloud. WAFs are capable of detecting and blocking malicious traffic, as well as filtering out malicious requests such as those associated with SQL injection and cross-site scripting attacks, thus providing an effective defense against malicious actors.&lt;/p&gt;

&lt;p&gt;Additionally, Snort IPS mode provides an added layer of security, allowing it to take action against suspicious behaviors including blocking malicious traffic and filtering out malicious requests. Ultimately, WAFs and Snort’s IPS mode ensure that an organization’s applications and data remain secure against malicious actors.&lt;/p&gt;

&lt;p&gt;The IPS mode can be activated when starting Snort using “-Q –daq afpacket” followed by the interfaces arguement “-i eth0:eth1” where eth0 and eth1 are the network interfaces you’d like to join.&lt;/p&gt;

&lt;p&gt;With IPS enabled, you’ll be able to add some simple rules using regular expression to the snort config file to drop harmful traffic&lt;/p&gt;

&lt;p&gt;Example - to block SQL injection rule&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TCP&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;your_target_server_ip&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nocase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;pcre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&amp;lt;&amp;gt;()+,]&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Above rule will filter:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;From any Source IP&lt;/li&gt;
  &lt;li&gt;From any source Port&lt;/li&gt;
  &lt;li&gt;Destination IP is your_target_server_ip, you need to change this&lt;/li&gt;
  &lt;li&gt;Destination Port is 80 (HTTP)&lt;/li&gt;
  &lt;li&gt;Content should have value “GET “ – can be changed to “POST”&lt;/li&gt;
  &lt;li&gt;Word “nocase” specifies matching is not case sensitive&lt;/li&gt;
  &lt;li&gt;filter based on Regular expression mentioned in “pcre=”[&apos;&quot;\;:|\&amp;amp;$\%\@\\/&amp;lt;&amp;gt;()+,]” will not allow ‘ “ ; : | &amp;amp;
@ \ / &amp;lt; &amp;gt; ( ) + , characters in request.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are additional resources and documentation for further customizing snort.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.snort.org/documents&quot;&gt;Snort Official Documentation - https://www.snort.org/documents&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/shirkdog/pulledpork&quot;&gt;Shirkdog’s PulledPork project - https://github.com/shirkdog/pulledpork&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/firnsy/barnyard2&quot;&gt;firnsy’s Barnyard Spooler for JSON alert outputs - https://github.com/firnsy/barnyard2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>4reW</name></author><category term="Posts" /><category term="Snort" /><category term="IDPS" /><category term="WAF" /><category term="DevSecOps" /><summary type="html">Snort is an Intrusion Detection and Prevention System (IDPS) designed to protect networks against malicious traffic and requests. As it is capable of detecting suspicious activity, such as malicious requests or traffic, it is able to take action to block such activities before they reach their destinations. IDPS systems are an integral part of any security infrastructure, as they protect against malicious actors exploiting potential security vulnerabilities. Furthermore, Snort can also be configured to act as a Web Application Firewall (WAF).</summary></entry><entry><title type="html">Powershell AMSI Lab - evading using obfuscation</title><link href="http://localhost:4000/AMSIProj" rel="alternate" type="text/html" title="Powershell AMSI Lab - evading using obfuscation" /><published>2023-04-21T00:00:00-07:00</published><updated>2023-04-21T00:00:00-07:00</updated><id>http://localhost:4000/AMSIProj</id><content type="html" xml:base="http://localhost:4000/AMSIProj">&lt;p&gt;Many developers have likely encountered the frustration of having their code flagged as a virus or malware by Windows Defender, even when the code is legitimate and performing necessary functions like accessing system functions or making TCP connections. It becomes even more frustrating when threat actors are able to bypass this security.&lt;/p&gt;

&lt;p&gt;To address these concerns, Windows 10 introduced the Anti-Malware Scan Interface (AMSI), which allows antivirus software to interact with the operating system and detect and respond to malicious code. AMSI is an essential tool for antivirus programs, offering more effective detection and blocking of malicious code, as well as providing detailed information about detected threats. It ultimately aims to protect users and create a safer computing environment.&lt;/p&gt;

&lt;p&gt;Despite the presence of AMSI, threat actors have invested significant effort into developing techniques to bypass its detection. These techniques include encrypting and decrypting payload scripts in memory within PowerShell, splitting up and recombining payload scripts, using various PowerShell encoding techniques, and embedding the payload within another executable. Aware of these techniques, it is important to understand how attackers can evade AMSI detection.&lt;/p&gt;

&lt;p&gt;Digging into the web on AMSI evasion research, there have been comprehensive resource on PowerShell obfuscation techniques published over the years. These findings suggest that AMSI currently struggles with detecting obfuscated PowerShell code.&lt;/p&gt;

&lt;p&gt;While obfuscated code can be identified through profiling using tools like Yara, the issue runs deeper. Any code can be redesigned with different nuances, creating countless possibilities for creating payloads. Threat actors can exploit this to allow their PowerShell scripts to bypass detection.&lt;/p&gt;

&lt;p&gt;The article also includes a proof of concept (POC) showcasing an obfuscated shell payload used to gain remote access in a custom lab environment, despite antivirus scans being enabled on the operating system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remediation Strategies&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To mitigate the risk of malicious code bypassing AMSI, it is important to conduct security audits on APIs, strengthen network infrastructure, properly configure systems with good access control, conduct regular penetration tests to identify vulnerabilities, update antivirus software, and perform regular audits and patching of the network environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pentesting Screenshots&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is a simple POC of an obfuscated shell payload that was generated using a obfuscator tool built with variable obfuscation in mind. It is being used to gain remote access in a custom lab environment. Though the antivirus scans are turned on the target, the payloaded still executed without being detected.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/launchpsx_amsi1.png&quot; alt=&quot;psx running custom payload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and what the reverse shell looks like once launched.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/customps_amsi1.png&quot; alt=&quot;reverse&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My thoughts on remdiation strategies&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Obfuscation techniques include randomizing variable names, padding with more logic and inserting wrapper logic around the executed scripts. Because of the small file size requirement for most payloads to fly undetected when logged, it is likely that the core execution steps are unchanged to keep things compact. Thus even if the variable lengths changes, the logical pattern of function calls, and assigning variable values are likely unchanged when additional information is padded on. Making it somewhat possible to flag by scanning the program for some core execution logic pattern.&lt;/p&gt;

&lt;p&gt;I’ve tested the idea and wrote a very basic file monitor/scanner &lt;a href=&quot;https://github.com/KeepCrispy/BlueWyvern&quot;&gt;BlueWyvern Scanner&lt;/a&gt; to use Regex to catch obfuscated and some possibly malicious code that would require some deeper knowledge of yara to perform. This works for a few basic payloads, but this is just a basic idea and isn’t battle tested like Yara. This is just a concept for a possible way to remediate this issue and should never replace a qualified malware analyst or blue team expert.&lt;/p&gt;

&lt;p&gt;This tool uses regex to detect code execution patterns, including suspects of malicious code, malicious URLs, IP addresses, file attachments, and hidden executable calls.&lt;/p&gt;

&lt;p&gt;To signature multiple payloads and see if there’s common features, the tool uses a pattern identification algorithm commonly used in analysing common ancestor genetics to find common code execution patterns when given multiple sources to profile. The finite machine regex-based string search can detect multiple requirements in a single line sweep. It’ll also try to detect base64 encoding in files if that’s used to obscure the payload.&lt;/p&gt;

&lt;p&gt;This tool can also run in file integrity monitor (FIM) mode, meaning it will scan and log updated files in the target directory. If provided with multiple rules as part of the arguements, it’ll scan for those as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Best Practices for Defense&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To protect production and internal network systems, users should follow best practices such as employing strong passwords, avoiding suspicious links and downloads, and regularly checking server and operating system access logs. The technology team should also stay informed about the latest threats and tactics used by attackers to bypass security measures. Engaging in penetration tests, application security reviews, and adhering to DevSecOps best practices can minimize the risk of network intrusion.&lt;/p&gt;

&lt;p&gt;Checking server and operating system access logs can help detect malicious activity, but it may be difficult to identify such activity depending on the type of malware used. Taking preventative measures like regular penetration tests, code review audits, and patching critical updates is crucial. Users should also practice online security best practices, including strong passwords and avoiding suspicious links and downloads.&lt;/p&gt;</content><author><name>4reW</name></author><category term="Posts" /><category term="AMSI" /><category term="Powershell" /><summary type="html">Many developers have likely encountered the frustration of having their code flagged as a virus or malware by Windows Defender, even when the code is legitimate and performing necessary functions like accessing system functions or making TCP connections. It becomes even more frustrating when threat actors are able to bypass this security.</summary></entry></feed>